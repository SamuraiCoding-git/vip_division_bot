from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, WebAppInfo
from aiogram.utils.keyboard import InlineKeyboardBuilder

from infrastructure.database.models import Admin
from tgbot.keyboards.callback_data import OfferConsentCallbackData, BackCallbackData, TariffsCallbackData, \
    GuidesCallbackData, PaginationCallbackData, ReadingCallbackData, AdminsListCallbackData, DeleteAdminCallbackData, \
    SettingsCallbackData, BlacklistCallbackData


def offer_consent_keyboard(extended=True, deeplink=None):
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úîÔ∏è –î–ê, –°–û–ì–õ–ê–°–ï–ù",
                callback_data=OfferConsentCallbackData(answer=True, deeplink=deeplink).pack()
            )
        ]
    ]

    if extended:
        buttons.append([
            InlineKeyboardButton(
                text="‚úñÔ∏è –ù–ï–¢, –ù–ï –°–û–ì–õ–ê–°–ï–ù",
                callback_data=OfferConsentCallbackData(answer=False, deeplink=deeplink).pack()
            )
        ])

    return InlineKeyboardMarkup(inline_keyboard=buttons)

def greeting_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="üî• –ü–û–î–†–û–ë–ù–ï–ï –ü–†–û –ö–õ–£–ë", callback_data="about_club"),
        ],
        [
            InlineKeyboardButton(text="‚úîÔ∏è –¢–ê–†–ò–§–´", callback_data="tariffs"),
        ],
        [
            InlineKeyboardButton(text="üíé –ü–û–î–î–ï–†–ñ–ö–ê", url="https://t.me/vipdivision"),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard

def menu_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="üî∫ –ß–¢–û –¢–ê–ö–û–ï VIP DIVISION", callback_data="about_vip_division"),
        ],
        [
            InlineKeyboardButton(text="üèÜ –ë–ò–û–ì–†–ê–§–ò–Ø", callback_data="biography"),
        ],
        [
            InlineKeyboardButton(text="‚ö° –ú–û–Ø –ü–û–î–ü–ò–°–ö–ê", callback_data="my_subscription"),
        ],
        [
            InlineKeyboardButton(text="‚úîÔ∏è –¢–ê–†–ò–§–´", callback_data="tariffs"),
        ],
        # [
        #     InlineKeyboardButton(text="üéÆ –ò–ì–†–ê", callback_data="game"),
        # ],
        [
            InlineKeyboardButton(text="üë• –û–¢–ó–´–í–´", callback_data="reviews"),
            InlineKeyboardButton(text="üìö –≠–ö–°–ü–ï–†–¢–´", callback_data="experts"),
        ],
        [
            InlineKeyboardButton(text="‚ùì –í–û–ü–†–û–°–´", callback_data="questions"),
            InlineKeyboardButton(text="üìù –ì–ê–ô–î–´", callback_data="guide"),
        ],
        [
            InlineKeyboardButton(text="üíé –ü–û–î–î–ï–†–ñ–ö–ê", url="https://t.me/vipdivision"),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard

def vip_division_keyboard(state):
    buttons = [
        [
            InlineKeyboardButton(text="üí¨ –ö–ê–ö –†–ê–ë–û–¢–ê–ï–¢ –ß–ê–¢?", callback_data="how_chat_works"),
        ],
        [
            InlineKeyboardButton(text="‚úÖ –í–°–¢–£–ü–ò–¢–¨ –í –°–û–û–ë–©–ï–°–¢–í–û", callback_data="tariffs"),
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=buttons,
    )
    return keyboard


def access_payment_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(text="üí∏ –û–ü–õ–ê–¢–ò–¢–¨ –î–û–°–¢–£–ü", callback_data="tariffs"),
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def story_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(text="‚úîÔ∏è –ß–ò–¢–ê–¢–¨ –ò–°–¢–û–†–ò–Æ", url="https://telegra.ph/YA-NEKRASIVYJ-U-MENYA-NET-DENEG-MNE-NE-POVEZLO-KOMU-YA-NUZHEN-MOYA-ISTORIYA-12-07"),
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def subscription_keyboard(state: str, plans):
    builder = InlineKeyboardBuilder()

    for plan in plans:
        builder.add(InlineKeyboardButton(text=plan.name, callback_data=TariffsCallbackData(id=plan.id).pack()))

    builder.add(InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()))

    builder.adjust(1)

    return builder.as_markup()

def reviews_payment_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(
                text="üëâüèΩ –ß–ò–¢–ê–¢–¨ –û–¢–ó–´–í–´", url="https://t.me/castingdirectorotzyv"
            ),
        ],
        [
            InlineKeyboardButton(
                text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –î–û–°–¢–£–ü", callback_data="tariffs"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)


def experts_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(text="–í–†–ê–ß", url="https://telegra.ph/VRACH-PRIVATKI---ANAR-11-13"),
            InlineKeyboardButton(text="–°–ü–û–†–¢", url="https://telegra.ph/RUZI--SPORT-PRIVATKI-12-07"),
            InlineKeyboardButton(text="–°–¢–ò–õ–ò–°–¢", url="https://telegra.ph/STILIST-PRIVATKI---RODOS-11-13"),
        ],
        [
            InlineKeyboardButton(text="üí≥ –û–ü–õ–ê–¢–ò–¢–¨ –î–û–°–¢–£–ü", callback_data="tariffs"),
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def access_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(text="–ò–ó–£–ß–ò–¢–¨ ‚úÖ", url="https://telegra.ph/CHto-poleznogo-est-v-tvoem-zakrytom-soobshchestve-11-04"),
        ],
        [
            InlineKeyboardButton(text="üí∏ –î–û–°–¢–£–ü –ó–ê 41 –†–£–ë/–î–ï–ù–¨", callback_data="tariffs"),
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def assistant_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(text="–ù–ê–ü–ò–°–ê–¢–¨ –ê–°–°–ò–°–¢–ï–ù–¢–£", url="https://t.me/vipdivision"),
        ],
        [
            InlineKeyboardButton(text="–í –ú–ï–ù–Æ ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def my_subscription_keyboard(state: str, is_sub=False, chat_link=None, channel_link=None, is_recurrent=False):
    if is_sub:
        text = "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ" if is_recurrent else "‚úÖ –í–ö–õ–Æ–ß–ò–¢–¨ –ø—Ä–æ–¥–ª–µ–Ω–∏–µ"
        buttons = [
            [
                InlineKeyboardButton(text="üî∫–í–°–¢–£–ü–ò–¢–¨ –í –ö–ê–ù–ê–õ", url=channel_link),
            ],
            [
                InlineKeyboardButton(text="üî∫–í–°–¢–£–ü–ò–¢–¨ –í –ß–ê–¢", url=chat_link),

            ],
            [
                InlineKeyboardButton(text=text, callback_data="toggle_recurrence")
            ],
            [
                InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
            ],
        ]
    else:
        buttons = [
            [
                InlineKeyboardButton(text="‚úîÔ∏è –¢–ê–†–ò–§–´", callback_data="tariffs"),
            ],
            [
                InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
            ],
        ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def guide_keyboard(state: str):
    buttons = [
        [
            InlineKeyboardButton(text="–ì–∞–π–¥ –ø–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∞–º", callback_data=GuidesCallbackData(guide="texting").pack()),
        ],
        [
            InlineKeyboardButton(text="–ì–∞–π–¥ –ø–æ —Å–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é", callback_data=GuidesCallbackData(guide="seduction").pack()),
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def communication_base_keyboard():
    buttons = [
        [
            InlineKeyboardButton(
                text="–ë–∞–∑–∞ –¥–ª—è –æ–±—â–µ–Ω–∏—è",
                url="https://t.me/c/1699879031/1061"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def get_guide_keyboard(text):
    buttons = [
        [
            InlineKeyboardButton(
                text=text,
                callback_data="get_guide"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def pagination_keyboard(current_page):
    buttons = [InlineKeyboardButton(
        text="‚Üê",  # Left arrow
        callback_data=PaginationCallbackData(page=current_page - 1).pack(),
    ), InlineKeyboardButton(
        text=f"{current_page} / 2",  # Page display
        callback_data="ignore",
    ), InlineKeyboardButton(
        text="‚Üí",  # Right arrow
        callback_data=PaginationCallbackData(page=current_page + 1).pack(),
    )]

    return InlineKeyboardMarkup(inline_keyboard=[buttons])


def read_keyboard(text, link, state, extended=False):
    buttons = [
        [
            InlineKeyboardButton(
                text=text,
                callback_data=ReadingCallbackData(link=link, state=state).pack()
            ),
        ],
    ]

    if extended:
        buttons.append([
            InlineKeyboardButton(
                text="–ù–∞—É—á–∏—Ç—å—Å—è —Ç–∞–∫–∂–µ üëåüèª",
                callback_data="get_guide"
            ),
        ])

    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)

    return keyboard

def guides_keyboard():
    buttons = [
        [
            InlineKeyboardButton(
                text="–†–∞–∑–±–æ—Ä —É–¥–∞—á–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏ —Å –°–ó",
                callback_data="successful_texting"
            ),
        ],
        [
            InlineKeyboardButton(
                text="–ì–∞–π–¥ –ø–æ –°–æ–±–ª–∞–∑–Ω–µ–Ω–∏—é",
                callback_data="get_guide"
            ),
        ],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def pay_keyboard(payment_link, state):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="üí≥ –ü–ï–†–ï–ô–¢–ò –ö –û–ü–õ–ê–¢–ï",
                web_app=WebAppInfo(url=payment_link)  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à URL
            )
        ],
        [
            InlineKeyboardButton(
                text="–û–ü–õ–ê–¢–ò–¢–¨ –ö–†–ò–ü–¢–û–ô USDT (TRC 20)",
                callback_data="pay_crypto"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ù–ê–ó–ê–î ‚Ü©",
                callback_data=BackCallbackData(state=state).pack()
            )
        ]
    ])

    return keyboard

def crypto_pay_link(state):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–ù–ê–ó–ê–î ‚Ü©",
                callback_data=BackCallbackData(state=state).pack()
            )
        ]
    ])
    return keyboard

def crypto_pay_check_keyboard(state):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(
                text="–Ø –û–ü–õ–ê–¢–ò–õ ‚úÖ",
                callback_data="check_crypto_pay"
            )
        ],
        [
            InlineKeyboardButton(
                text="–ù–ê–ó–ê–î ‚Ü©",
                callback_data=BackCallbackData(state=state).pack()
            )
        ]
    ])
    return keyboard

def join_resources_keyboard(channel_invite_link, chat_invite_link, is_recurrent):
    buttons = [
        [
            InlineKeyboardButton(text="üî∫ –í–°–¢–£–ü–ò–¢–¨ –í –ö–ê–ù–ê–õ", url=channel_invite_link)
        ],
        [
            InlineKeyboardButton(text="üî∫ –í–°–¢–£–ü–ò–¢–¨ –í –ß–ê–¢", url=chat_invite_link)
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def instruction_keyboard():
    buttons = [
        InlineKeyboardButton(text="1Ô∏è‚É£ –ò–∑—É—á–∏—Ç—å –¥–ª—è –Ω–∞—á–∞–ª–∞", url="https://telegra.ph/S-chego-nachat-chitat-privatnyj-kanal-12-23")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    return keyboard

def ready_to_change_keyboard():
    buttons = [
        InlineKeyboardButton(text="‚úÖ –Ø –≥–æ—Ç–æ–≤ –∏ —Ö–æ—á—É –∏–∑–º–µ–Ω–µ–Ω–∏–π", callback_data="ready_to_change")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def community_keyboard():
    buttons = [
        [
            InlineKeyboardButton(
                text="üíØ–û—Ç–∑—ã–≤—ã", url="https://t.me/castingdirectorotzyv"
                                 )
        ],
        [
            InlineKeyboardButton(
                text="‚ùì –í–û–ü–†–û–°–´", callback_data="questions"
            )
        ],
        [
            InlineKeyboardButton(
                text="‚û°Ô∏è –î–æ—Å—Ç—É–ø –∑–∞ 46 —Ä—É–±/–º–µ—Å—è—Ü", callback_data="tariffs"
            )
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard


def generate_keyboard(button_text):
    buttons = [
        InlineKeyboardButton(text=button_text, callback_data="tariffs")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    return keyboard

def podcast_channel_keyboard():
    buttons = [
        InlineKeyboardButton(text="–°–º–æ—Ç—Ä–µ—Ç—å –ø–æ–¥–∫–∞—Å—Ç", url="https://youtu.be/I1bn-3Y5A_Y")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    return keyboard

def admin_keyboard():
    buttons = [
        [
            InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞", callback_data="add_admin"),
            InlineKeyboardButton(text="C–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤", callback_data="admin_list")
        ],
        [
            InlineKeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="admin_settings")
        ],
        [
            InlineKeyboardButton(text="–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", switch_inline_query_current_chat="")
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def user_status_keyboard(data):
    buttons = [
        [
            InlineKeyboardButton(
                text=f"{'–†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å' if data['is_blocked'] else '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å'} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
                callback_data=BlacklistCallbackData(
                                id=data['id'],
                                is_blocked=data['is_blocked']).pack()
            )
        ]
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    return keyboard

def admins_list_keyboard(admins_list: list[Admin]):
    keyboard = InlineKeyboardBuilder()

    for admin in admins_list:
        keyboard.add(InlineKeyboardButton(text=f"{admin.id}",
                                          callback_data=AdminsListCallbackData(id=admin.id).pack()))

    keyboard.adjust(1)
    return keyboard.as_markup()

def settings_keyboard(settings: dict, state: str):
    keyboard = InlineKeyboardBuilder()
    for setting in settings.values():
        title = setting['title']
        status_icon = '‚úÖ' if setting['value'] else '‚ùå'
        callback_data = SettingsCallbackData(id=setting['id'], value=setting['value']).pack()
        keyboard.button(
            text=f"{title} {status_icon}",
            callback_data=callback_data
        )
    keyboard.add(InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack()))
    keyboard.adjust(1)
    return keyboard.as_markup()



def admin_delete_keyboard(id, state):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=DeleteAdminCallbackData(id=id).pack())
        ],
        [
            InlineKeyboardButton(text="–ù–ê–ó–ê–î ‚Ü©", callback_data=BackCallbackData(state=state).pack())
        ]
    ])
    return keyboard