from datetime import datetime, timedelta

import requests
from aiogram import Bot
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from infrastructure.database.repo.requests import RequestsRepo
from infrastructure.database.setup import create_session_pool
from tgbot.config import Config
from tgbot.utils.payment_utils import process_payment


async def check_subscriptions(bot: Bot, config: Config):
    session_pool = await create_session_pool(config.db)

    async with session_pool() as session:
        repo = RequestsRepo(session)
        subscriptions = await repo.subscriptions.get_active_recurrent_subscriptions()
        now = datetime.utcnow()

        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ú–æ—è –ø–æ–¥–ø–∏—Å–∫–∞ ‚úÖ", callback_data="my_subscription")]
        ])

        for subscription in subscriptions:
            payment = await repo.payments.get_latest_successful_payment(subscription.user_id)
            days_remaining = (subscription.end_date - now).days
            if subscription.id == 178:
                print(True)
            if days_remaining <= 0:
                print(days_remaining)
            else:
                pass

            if days_remaining <= 0:
                try:
                    await process_payment(
                        payment.binding_id,
                        subscription.user_id,
                        config.misc.sys,
                        config.payment.token,
                        config.misc.payment_form_url,
                        subscription.plan.discounted_price
                    )
                    await bot.send_message(subscription.user_id, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞!",
                                           reply_markup=keyboard)

                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–¥–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ {subscription.id}: {e}")
                    subscription.is_recurrent = False
                    subscription.status = "expired"
                    await session.commit()

                    await send_failed_renewal_notification(bot, subscription.user_id)

                    await ban_user_from_channel_and_chat(bot, subscription.user_id, config)


async def send_failed_renewal_notification(bot: Bot, user_id: int):
    text = (
        "–£–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞\n\n"
        "‚ùå <b>–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å.</b>"
    )

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª ‚Ü©Ô∏è", callback_data="tariffs")],
        [InlineKeyboardButton(text="ü§ùüèΩ –ù–∞–ø–∏—Å–∞—Ç—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É", url="https://t.me/vipdivision")]
    ])

    await bot.send_message(user_id, text, reply_markup=keyboard, parse_mode="HTML")


async def ban_user_from_channel_and_chat(bot: Bot, user_id: int, config: Config):
    try:

        await bot.ban_chat_member(chat_id=config.misc.private_channel_id, user_id=user_id)
        await bot.ban_chat_member(chat_id=config.misc.private_chat_id, user_id=user_id)

        print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {config.misc.private_channel_id} –∏ —á–∞—Ç–µ {config.misc.private_chat_id}.")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –±–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")

def normalize_usdt_price(transaction_data):
    """
    Normalizes the USDT price from the transaction data.
    :param transaction_data: The transaction data containing 'trc20TransferInfo'.
    :return: Normalized USDT price as a float.
    """
    try:
        trc20_info = transaction_data.get('trc20TransferInfo', [{}])[0]  # Get the first transfer info
        amount_str = trc20_info.get('amount_str', '0')
        decimals = trc20_info.get('decimals', 6)  # Default to 6 decimals if not provided
        normalized_amount = float(amount_str) / (10 ** decimals)
        return normalized_amount
    except (KeyError, IndexError, ValueError) as e:
        print(f"Error normalizing USDT price: {e}")
        return None


def get_transaction_confirmations(tx_hash, usd_price, tron_wallet):
    try:
        response = requests.get(f"https://apilist.tronscanapi.com/api/transaction-info?hash={tx_hash}")

        if response.status_code != 200:
            return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: HTTP {response.status_code}"

        transaction_data = response.json()

        if 'confirmed' not in transaction_data:
            return "–ü–æ–ª–µ 'confirmed' –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏."

        if not transaction_data.get('confirmed', False):
            return "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."

        if transaction_data['tokenTransferInfo']['to_address'] != tron_wallet:
            return "–ê–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ–∂–∏–¥–∞–µ–º—ã–º."

        if usd_price > normalize_usdt_price(transaction_data):
            return "–°—É–º–º–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –º–µ–Ω—å—à–µ –æ–∂–∏–¥–∞–µ–º–æ–π."

        return "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞."

    except requests.RequestException as e:
        return f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ API: {str(e)}"

    except ValueError:
        return "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API. –í–æ–∑–º–æ–∂–Ω–æ, –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç JSON."

    except Exception as e:
        return f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}"
